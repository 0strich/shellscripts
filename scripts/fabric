#!/bin/bash

# set -e

# execute script path
MY_PATH=$(dirname $(readlink -f $0))

source $MY_PATH/bin/fabric_init.sh

# 테스트넷 환경변수 및 설정
function fabric_settings() {
  if [ -d "fabric-samples" ]; then
    # test-network 이동
    pushd $HOME/fabric-samples/test-network

    # 환경설정
    export PATH=${PWD}/../bin:$PATH
    export FABRIC_CFG_PATH=$PWD/../config/
    # Environment variables for Org1
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID="Org1MSP"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    export CORE_PEER_ADDRESS=localhost:7051

    # custom assets
    if [ -d "$HOME/shellscripts/hyperledger" ]; then
      rm -rf "$HOME/fabric-samples/config"
      cp -r "$HOME/shellscripts/hyperledger/fabric/config" "$HOME/fabric-samples"

      ## JavaScript
      # cp "$HOME/shellscripts/hyperledger/fabric/asset-transfer-basic/chaincode-javascript/bin/assetTransfer.js" "$HOME/fabric-samples/asset-transfer-basic/chaincode-javascript/lib/assetTransfer.js"
      # cp "$HOME/shellscripts/hyperledger/fabric/asset-transfer-ledger-queries/chaincode-javascript/lib/asset_transfer_ledger_chaincode.js" "$HOME/fabric-samples/asset-transfer-ledger-queries/chaincode-javascript/lib/asset_transfer_ledger_chaincode.js"

      ## Go
      # cp "$HOME/shellscripts/hyperledger/fabric/asset-transfer-basic/chaincode-go/chaincode/smartcontract.go" "$HOME/fabric-samples/asset-transfer-basic/chaincode-go/chaincode/smartcontract.go"
      cp "$HOME/shellscripts/hyperledger/fabric/asset-transfer-ledger-queries/chaincode-go/asset_transfer_ledger_chaincode.go" "$HOME/fabric-samples/asset-transfer-ledger-queries/chaincode-go/asset_transfer_ledger_chaincode.go"
    fi

    # config file update
    if [[ $OSTYPE == "darwin"* ]]; then
      # sed -i '' 's/\BatchTimeout: 2s\b/BatchTimeout: 1s/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i '' 's/\MaxMessageCount: 10\b/MaxMessageCount: 500/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i '' 's/\AbsoluteMaxBytes: 99 MB\b/AbsoluteMaxBytes: 990 MB/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i '' 's/\PreferredMaxBytes: 512 KB\b/PreferredMaxBytes: 5120 KB/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
    else
      # sed -i 's/\BatchTimeout: 2s\b/BatchTimeout: 1s/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i 's/\MaxMessageCount: 10\b/MaxMessageCount: 500/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i 's/\AbsoluteMaxBytes: 99 MB\b/AbsoluteMaxBytes: 990 MB/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
      sed -i 's/\PreferredMaxBytes: 512 KB\b/PreferredMaxBytes: 5120 KB/g' $HOME/fabric-samples/test-network/configtx/configtx.yaml
    fi

    popd
  fi
}

# 설명
function print_help() {
  echo 'print help'
}

function fabric_pull() {
  # download 하이퍼레저 패브릭 & docker pull
  curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.3 1.4.9
}

# [v2] 패브릭 네트워크 실행
function fabric_up() {
  # 폴더 이동
  pushd $HOME/fabric-samples/test-network

  # 테스트넷 실행
  # ./network.sh up createChannel
  # ./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go
  ./network.sh up createChannel -s couchdb
  ./network.sh deployCC -ccn basic -ccp ../asset-transfer-ledger-queries/chaincode-go -ccl go -ccep "OR('Org1MSP.peer','Org2MSP.peer')"

  # /tmp/crypt 초기화 & 업데이트
  if [ -d "/tmp/crypto" ]; then
    rm -rf /tmp/crypto/*
    cp -r ./organizations/* /tmp/crypto
  else
    mkdir /tmp/crypto
    cp -r ./organizations/* /tmp/crypto
  fi

  # 피어 초기화
  peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"InitLedger","Args":[]}'

  popd
}

# [v2] 패브릭 네트워크 실행
function fabric_down() {
  pushd $HOME/fabric-samples/test-network
  ./network.sh down
  popd
}

# [v2] 패브릭 네트워크 재실행
function fabric_rebuild() {
  # 폴더 이동
  pushd $HOME/fabric-samples/test-network

  # 테스트넷 중지
  ./network.sh down

  # 업데이트
  pushd $HOME/shellscripts/hyperledger
  rm -rf caliper/caliper.log
  git pull
  popd

  # 테스트넷 실행
  fabric_up

  exit
}

function fabric_restart() {
  docker stop $(docker ps -a -q)
  doc clean
  rm -rf $HOME/fabric-samples
  fabric pull
  fabric up
}

function fabric_clean() {
  docker stop $(docker ps -a -q)
  doc clean
  rm -rf $HOME/fabric-samples
}

# [v2] get access
function get_assets() {
  # 폴더 이동
  pushd $HOME/fabric-samples/test-network

  # 조회
  # peer chaincode query -C mychannel -n basic -c '{"Args":["GetAllAssets"]}'
  peer chaincode query -C mychannel -n basic -c '{"Args":["QueryAssets", "{\"selector\":{\"docType\":\"asset\"}, \"use_index\":[\"_design/indexDocType\", \"indexDocDype\"]}"]}'
  # peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic -c '{"Args":["CreateAsset","asset5"]}'

  popd
}

if [ "$1" == "init" ]; then
  fabric_settings
  fabric_init
elif [ "$1" == "pull" ]; then
  fabric_pull
elif [ "$1" == "up" ]; then
  fabric_settings
  fabric_up
elif [ "$1" == "down" ]; then
  fabric_settings
  fabric_down
elif [ "$1" == "get" ]; then
  fabric_settings
  get_assets
elif [ "$1" == "rebuild" ]; then
  fabric_settings
  fabric_rebuild
elif [ "$1" == "restart" ]; then
  fabric_restart
elif [ "$1" == "clean" ]; then
  fabric_clean
else
  print_help
  exit 1
fi
