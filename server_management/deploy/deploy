#!/bin/bash
set -e

echo 'test'

# Default values for options
export DEPLOY_PROJECT=false
export PROJECT_HOST=$2
export PROJECT_PATH=$3
export PROJECT_NAME=$4

# Usage information
function usage() {
	echo "Usage: $0 [-n]"
	echo "Options:"
	echo "  -n  Project Name"
}

# 배포 서버에서 프로젝트 서버 접속 및 배포
function command() {
	echo "Deploying $PROJECT_NAME..."

	echo "HOST $PROJECT_HOST"
	echo "PATH $PROJECT_PATH"
	echo "NAME $PROJECT_NAME"

	pushd $PROJECT_PATH

	container_name=$(grep "container_name:" docker-compose.yml | awk '{print $2}')

	git pull

	# package.json version 제외한 해시 비교(추가/변경 모듈 확인)
	if [ -e "hash.json" ]; then
		echo "Compare Hash..."
		# 저장된 해시값 읽기
		hash=$(jq -r '.hash' hash.json)

		# 현재 파일의 해시값 계산
		current_hash=$(cat package.json | jq 'del(.version)' | sha256sum | cut -d ' ' -f 1 | sed 's/\(.*\)/\1/')

		# 저장된 해시값과 현재 파일의 해시값 비교(다를경우 npm install)
		if [ "$hash" == "$current_hash" ]; then
			echo "Deploy Complete."
		else
			echo "Npm Install..."
			docker exec -i $container_name /bin/bash -c "npm install"
			echo "Npm Install Complete."
			# 새로운 해시값으로 갱신
			cat package.json | jq 'del(.version)' | sha256sum | cut -d ' ' -f 1 | sed 's/\(.*\)/{"hash": "\1"}/' >hash.json
		fi
	else
		# hash.json 파일이 없는 경우 새로 생성
		cat package.json | jq 'del(.version)' | sha256sum | cut -d ' ' -f 1 | sed 's/\(.*\)/{"hash": "\1"}/' >hash.json
	fi
	popd
}

# Parse options
while getopts ":n" opt; do
	case ${opt} in
	n)
		DEPLOY_PROJECT=true
		;;
	\?)
		usage
		exit 1
		;;
	:)
		echo "Invalid option: -$OPTARG requires an argument" 1>&2
		usage
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

# 프로젝트 배포
if $DEPLOY_PROJECT; then
	ssh $1 "$(typeset -f command); command \"$PROJECT_HOST\" \"$PROJECT_PATH\" \"$PROJECT_NAME\""
	echo "Deploying $PROJECT_NAME Complete."
fi

# Final message
echo "Deploy Success."
echo "Deploy Success."
